
======= Making a Flask application =======

Not much code or configuration is needed to make a Flask application.
Actually one short file is enough. For this file to work you need to
install Flask and some corresponding packages. This is easiest
performed by

!bc sys
Terminal> sudo pip install Flask
Terminal> sudo pip install WTForms
!ec
You can add `--upgrade` to upgrade a previous installation.

===== Programming the Flask application =====

We want our input page to feature in text field where the user can
write the value of `r`, see Figure ref{wf:hw1:flask:fig:input}.
By clicking *equals*
we compute the corresponding `s` and write out the result page
seen in Figure ref{wf:hw1:flask:fig:result}.

FIGURE: [fig-web4sa/hw1_flask_input, width=600] The input page. label{wf:hw1:flask:fig:input}

FIGURE: [fig-web4sa/hw1_flask_output, width=600] The output page. label{wf:hw1:flask:fig:result}

## Define Mako variable for path to source code
<%
app_path = src_path + 'hw/hw1_flask'
%>

Flask does not require us to use the MVC pattern so there is actually
no need to split the original program into `model.py`, `view.py`,
`controller.py`, and `compute.py` as already explained.  First we make
a `controller.py` file where the view, the model, and the controller
parts are within the same part. Later, we split the view, model, and
controller into three files for illustration. The `compute` component
is always in a separate files as we like to encapsulate the
computations completely from user interfaces.

The view that the user sees is determined by
HTML templates in a subdirectory `templates`, and consequently
we name the template files `view*.html`.
The model and other parts of the view concept are just parts of
the `controller.py` file:

@@@CODE ${app_path}/controller.py
We collect the files associated with a Flask app in a directory,
here called `hw1_flask`.

The web application is the `app` object of class `Flask` initialized
as shown. The model is a special Flask class derived from `Form`
where the data are listed as static class attributes and initialized
by various form field objects from the `wtforms` package.
These form fields correspond to HTML forms in the input page.
For the `r` variable we apply `FloatField` since it is a floating-point
variable. A default validator, here checking that the user supplies
a real number, is easily included.

The view, controlling how the user interacts with the data, consists
an URL and corresponding function to call when this is invoked URL.
The function name is here `index` (corresponding to the standard
`index.html` page that is the main page of a URL) and the
decorator `@app.route('/hw1', ...)` maps the URL
`http://127.0.0.1:5000/hw1` to a call to `index`.
The `methods` argument must be as shown to allow the user to communicate
with the web page.

The `index` function first makes a form object based on the data in
the model, here class `InputForm`. Then there are two possibilities:
either the user has provided data in the HTML form or the user is
to be offered an input form. In the former case, `request.method`
equals `'POST'` and we can extract the numerical value of `r`
from the `form` object, `form.r.data`, call up our mathematical
computations, and make a web page with the result.
In the latter case, we make an input page as displayed in
Figure ref{wf:hw1:flask:fig:input}.

Making a web page with Flask is conveniently done through an HTML
template. Since the output page is simplest we display the
`view_output.html` template first:

@@@CODE ${app_path}/templates/view_output.html

Keyword arguments sent to `render_template` are available in the
HTML template. With the `form` object we extract the value of
`r` in the HTML code by `{{form.r.data}}`. Similarly, the value of `s`
is simply `{{s}}`.

The HTML template for the input page is slightly more complicated
as we need to use an HTML form:

@@@CODE ${app_path}/templates/view_input.html

All you have to do in order to run this web application is

!bc sys
Terminal> python controller.py
!ec

!split
===== Equipping the input page with output results =====

## Define Mako variable for path to source code
<%
app_path = src_path + 'hw/hw2_flask'
%>

Our application made two distinct pages for grabbing input from the
user and presenting the result. It is often more natural to add
the result to the input page. This is particularly the case in the present
web application, which is a kind of calculator. Figure ref{wf:hw2:flask:fig:result} shows what the user sees after clicking the *equals* button.

FIGURE: [fig-web4sa/hw2_flask_output, width=600] The modified result page. label{wf:hw2:flask:fig:result}

To let the user stay within the same page, we create a new directory `hw2_flask`
for this modified Flask app and copy the files from the previous
`hw1_flask` directory.  The idea now is to make use of just one
template, in `templates/view.html`:

@@@CODE ${app_path}/templates/view.html

The form is identical to what we used in `view_input.html`, and the only
new thing is the value of `s`. We supply `s` as an object to the
`render_template` function and this object is available for
some programming in the HTML template. We can test on the value of `s`:
if it is `None`, we know that the computations are not performed and
`s` should not appear on the page, otherwise `s` holds the sine
value and we can write it out. The generated HTML code reads

!bc html
<form method=post action="">
  Hello, World! The sine of
  <input id="r" name="r" type="text" value="1.2">
  <input type=submit value=equals>

0.932039085967

</form>
!ec

The `index` function needs adjustments since we use the same
template for the input and the output page:

@@@CODE ${app_path}/controller.py fromto: # View@if __name
It is seen that if the user has given data, `s` is a `float`, otherwise
`s` is `None`. You are encouraged to test the app by running

!bc sys
Terminal> python controller.py
!ec
and loading `http://127.0.0.1:5000/hw2` into your browser.
A nice little exercise is to control the formatting of the result `s`.
To this end, you transform `s` to a string: `s = '%.5f' % s` before
sending it to `render_template`.

!split
===== Splitting the app into model, view, and controller files =====
label{wf:hw3:flask}

## Define Mako variable for path to source code
<%
app_path = src_path + 'hw/hw3_flask'
%>

In our previous to Flask apps we have had the model, view, and
controller parts in one file `controller.py`. For illustration we
may split the previous `controller.py` into three files:
`model.py`, `view.py`, and `controller.py`, located in a
directory `hw3_flask`. The contents
in these files reflects the splitting introduced in the original
scienticic hello world program in Section ref{wf:hw:mvc}.
In the Flask context we have `model.py` as

@@@CODE ${app_path}/model.py

The view in 'view.py' consists of

@@@CODE ${app_path}/view.py

The `controller.py` file finally runs the view's `app`:

@@@CODE ${app_path}/controller.py

The statements are indentical to those in the `hw2_flask` app, only
the organization of the statement in files differ.


===== Troubleshooting =====

__Address already in use.__
You can easily kill the Flask application and restart it, but sometimes
you will get an error that the address is already in use.
To recover from this problem, run the `lsof` program to see which program
that applies the 5000 port (Flask runs its server on `http://127.0.0.1:5000`):

!bc sys
Terminal> lsof -i :5000
COMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
python  48824  hpl    3u  IPv4 1128848      0t0  TCP ...
Terminal> kill -9 48824
!ec
The last command killed the `python` job that ran the test server and
you are ready to relaunch the Flask application.

