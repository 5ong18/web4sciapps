
!split
======= Handling multiple input variables in Flask =======
label{wf:vib:flask}

The scientific hello world example shows how to work with one input
variable and one output variable. We can easily derive an extensible
recipe for apps with a collection of input variables and some
corresponding HTML code as result. Multiple input variables are listed
in the `InputForm` class using different types for different forms
(text field, float field, integer field, check box field for boolean
values, etc.).  The value of these variables will be available in a
`form` object for computation. It is then a matter of setting
up a template code where the various variables if the `form` object
are formatted in HTML code as desired.

Our sample web application
addresses the task of plotting the function $u(t)=Ae^{-bt}\sin (wt)$ for
$t\in [0,T]$. The web application must have fields for the numbers $A$,
$b$, $w$, and $T$, and a *Compute* button, as shown in Figure
ref{wf:vib1:flask:fig:input}. Filling in values, say $0.1$ for $b$ and
$20$ for $T$, results in what we see in Figure ref{wf:vib1:flask:fig:result},
i.e., a plot of $u(t)$ is added after the input fields and the *Compute*
button.

FIGURE: [fig-web4sa/vib1_flask_input, width=500] The input page. label{wf:vib1:flask:fig:input}

FIGURE: [fig-web4sa/vib1_flask_output, width=700] The result page. label{wf:vib1:flask:fig:result}

===== Programming the Flask application =====
label{wf:vib1:flask:app}

## Define Mako variable for path to source code
<%
app_path = src_path + 'flask_apps/vib1'
%>

The forthcoming text explains the necessary steps to realize a
Flask app that behaves as depicted in Figures ref{wf:vib1:flask:fig:input}
and ref{wf:vib1:flask:fig:result}. We start with the
`compute.py` module since it contains only the computation of $u(t)$
and the making of the plot, without any interaction with Flask.

__The compute part.__
More specifically, inside `compute.py`, we have a function for
evaluating $u(t)$ and a `compute` function for making the plot. The
return value of the latter is the name of the plot file, which should
get a unique name every time the `compute` function is called such
that the browser cannot reuse an already cached image. Flask
applications must have all extra files (CSS, images, etc.) in a
subdirectory `static`.

@@@CODE ${app_path}/compute.py

idx{Flask!input forms}

We organize the model, view, and controller as three separate
files, as illustrated in
Section ref{wf:hw3:flask}. This more complicated app involves
more code and especially the model will soon be handy to isolate in its own
file.

__The model.__ Our first version of `model.py` reads

@@@CODE ${app_path}/model.py

As seen, the field classes can take a `label` argument for a longer
description, here also including the units in which the variable is
measured. It is also possible to add a `description` argument with
some help message. Furthermore, we include a `default` value, which
will appear in the text field such that the user does not need to
fill in all values.

idx{Flask!`index` function}


__The view.__
The view component will of course make use of templates, and we shall experiment
with different templates. Therefore, we allow a command-line argument
to this Flask app for choosing which template we want. The rest of
the `controller.py` file follows much the same set up as for the scientific
hello world app:

@@@CODE ${app_path}/controller.py

The details governing how the web page really looks like lie in the
template file. Since we have several fields and want them nicely
align in a tabular fashion, we place the field name, text areas,
and labels inside an HTML table in our first attempt to write a
template, `view0.html`:

@@@CODE ${app_path}/templates/view0.html
Observe how easy it is to iterate over the `form` object and grab data
for each field: `field.name` is the name of the variable in the
`InputForm` class, `field.label` is the full name with units as given
through the `label` keyword when constructing the field object, and
writing the field object itself generates the text area for
input (i.e., the HTML input form). The control statements we can
use in the template are part of the "Jinja2": "http://jinja.pocoo.org/docs/"
templating language. For now, the if-test, for-loop and
output of values (`{{ object }}`) are enough to generate the HTML
code we want.

Recall that the objects we need in the template, like `result` and `form`
in the present case, are transferred to the template via keyword
arguments to the `render_template` function. We can easily pass on
any object in our application to the template. Debugging of the template
is done by viewing the HTML source of the web page in the browser.

You are encouraged to run `python controller.py` and load `http://127.0.0.1:5000/vib1` into your web browser for testing.

!split
===== Implementing error checking in the template =====

idx{Flask!error checking}

What happens if the user gives wrong input, for instance the letters `asd`
instead of a number? Actually nothing! The `FloatField` object
checks that the input is compatible with a real number in the
`form.validate()` call, but returns just `False` if this is not
the case. Looking at the code in `controller.py`,

!bc pycod
def index():
    form = InputForm(request.form)
    if request.method == 'POST' and form.validate():
        result = compute(form.A.data, form.b.data,
                         form.w.data, form.T.data)
    else:
        result = None
!ec
we realize that wrong input implies `result = None` and no computations
and no plot! Fortunately, each field object gets an attribute `error`
with information on errors that occur on input. We can write out
this information on the web page, as exemplified in the template
`view1.html`:

@@@CODE ${app_path}/templates/view1.html
Two things are worth noticing here:

 o We can control the width of the text field where the
   user writes the numbers, here set to 12 characters.
 o We can make an extra column in the HTML table with a list
   of possible errors for each field object.

Let us test the error handling of the `A` field by
writing `asd` instead of a number. This input
triggers an error, whose message is written in red to the right of the label,
see Figure ref{wf:vib1:flask:fig:error1}.

FIGURE: [fig-web4sa/vib1_flask_error1, width=500] Error message because of wrong input. label{wf:vib1:flask:fig:error1}

!split
===== Using style sheets =====

idx{Flask!CSS style sheets}

Web developers make heavy use of CSS style sheets to control the look
and feel of web pages. Templates can utilize style sheets as any other
standard HTML code. Here is a very simple example where we introduce
a class `name` for the HTML table's column with the field name and set the
foreground color of the text in this column to blue.
The style sheet is called `basic.css` and *must* reside in the
`static` subdirectory of the Flask application directory:

@@@CODE ${app_path}/static/basic.css
The `view2.html` file using this style sheet features a `link` tag
to the style sheet in the HTML header, and the column containing
the field name has
the HTML tag `<td class="name">` to trigger the specification in
the style sheet:

@@@CODE ${app_path}/templates/view2.html fromto: @\{% if field\.errors
Just run `python controller.py view2` to see that the names
of the variables to set in the web page are blue.

===== Using LaTeX mathematics =====

idx{Flask!LaTeX mathematics}

Scientific applications frequently have many input data that are
defined through mathematics and where the typesetting on the
web page should be as close as possible to the typesetting where
the mathematics is documented. In the present example we would like
to typeset $A$, $b$, $w$, and $T$ with italic font as done
in LaTeX. Fortunately, native LaTeX typesetting is available in
HTML through the tool "MathJax": "http://www.mathjax.org/".
Our template `view3.html` enables MathJax. Formulas are written
with standard LaTeX inside `\(` and `\)`, while equations are surrounded
by `$$`. Here we use formulas only:

@@@CODE ${app_path}/templates/view3.html fromto: @\{% if field\.errors
Figure ref{wf:vib1:flask:fig:latex} displays how the
LaTeX rendering looks like in the browser.

FIGURE: [fig-web4sa/vib1_flask_latex, width=650] LaTeX typesetting of mathematical symbols. label{wf:vib1:flask:fig:latex}


===== Rearringing the elements in the HTML template =====

Now we want to place the plot to the right of the input forms in
the web page, see Figure ref{wf:vib1:flask:fig:sidebyside}. This can
be accomplished by having an outer table with two rows. The first
row contains the table with the input forms in the first column and
the plot in the second column, while the second row features the
*Compute* button in the first column.

FIGURE: [fig-web4sa/vib1_flask_table2, width=700] New design with input and output side by side. label{wf:vib1:flask:fig:sidebyside}

The enabling template file is `view4.html`:

@@@CODE ${app_path}/templates/view4.html


!split
===== User-provided validation =====
label{wf:vib1:flask:validation}

## Define Mako variable for path to source code
<%
app_path = src_path + 'flask_apps/vib2'
%>

idx{Flask!input validation}


The `FloatField` objects can check that the input is compatible with
a number, but what if we want to control that $A>0$, $b>0$, and
$T$ is not greater than 30 periods (otherwise the plot gets cluttered)?
We can write functions for checking appropriate conditions and
supply the function to the list of validator functions in the call to
the `FloatField` constructor or other field constructors. The extra
code is a part of the `model.py` and the presented extensions appear
in the directory "`vib2`": "${github_path}/${app_path}".

The simplest approach to validation is to use existing functionality
in the web framework. Checking that $A>0$ can be done by
the `NumberRange` validator which checks that the value is inside
a prescribed interval:

!bc pycod
from wtforms import Form, FloatField, validators

class InputForm(Form):
    A = FloatField(
        label='amplitude (m)', default=1.0,
        validators=[validators.NumberRange(0, 1E+20)])
!ec

We can also easily provide our own more tailored validators.
As an example, let us explain how we can check that $T$ is less than 30 periods.
One period is $2\pi /w$ so we need to check if $T> 30\cdot 2\pi/w$
and raise an exception in that case.
A validation function takes two arguments: the whole `form` and the
specific `field` to test:

@@@CODE ${app_path}/model.py fromto: def check_T@def check_interval
The appropriate exception is of type `validators.ValidationError`.
Observe that through `form` we have in fact access to all the input
data so we can easily use the value of $w$ when checking the validity
of the value of $T$. The `check_T` function is easy to
add to the list of validator functions in the call to the `FloatField`
constructor for `T`:

!bc pycod
class InputForm(Form):
    ...
    T = FloatField(
        label='time interval', default=6*pi,
        validators=[validators.InputRequired(), check_T])
!ec
The validator
objects are tested one by one as they appear in the list, and if
one fails, the others are not invoked.
We therefore add `check_T` after the check of input such that we know we
have a value for all data when we run the computations and test
in `check_T`.

Although there is already a `NumberRange` validator for checking
whether a value is inside an interval, we can write our own
version with some improved functionality for open intervals where
the maximum or minimum value can be infinite.
The infinite value can on input be represented by `None`.
A general such function may take the form

@@@CODE ${app_path}/model.py fromto: def check_interval@def interval

idx{`functools`}

The problem is that `check_interval` takes four arguments, not only
the `form` and `field` arguments that a validator function in the
Flask framework can accept.
The way out of this difficulty is to use a Python tool `functools.partial`
which allows us to call a function with some of the arguments set beforehand.
Here, we want to create a new function that calls `check_interval`
with some prescribed values of `min_value` and `max_value`.
This function looks like it does not have these arguments, only
`form` and `field`. The following function produces this function, which we
can use as a valid Flask validator function:

!bc pycod
import functools

def interval(min_value=None, max_value=None):
    return functools.partial(
        check_interval, min_value=min_value, max_value=max_value)
!ec
We can now in any field constructor just add
`interval(a, b)` as a validator function, here checking that $b\in [0,\infty)$:

!bc pycod
class InputForm(Form):
    ...
    b = FloatField(
        label='damping factor (kg/s)', default=0,
        validators=[validators.InputRequired(), interval(0,None)])
!ec

Let us test our tailored error checking. Run `python controller.py`
in the `vib2` directory and fill in $-1.0$ in the $b$ field.
Pressing *Compute* invokes our `interval(0,None)` function, which
is nothing but a call `check_interval(field, form, 0, None)`.
Inside this function,
the test `if field.data < min_value` becomes true, `failure`
is set, and the exception is raised. The message in the exception
is available in the `field.errors` attribute so our template
will write it out in red, see Figure ref{wf:vib2:flask:fig:error1}.
The template used in `vib2` is basically the same as `view3.html`
in `vib1`, i.e., it feaures LaTeX mathematics and checking of
`field.errors`.

FIGURE: [fig-web4sa/vib2_flask_error1, width=500] Triggering of a user-defined error check. label{wf:vib2:flask:fig:error1}

Finally, we mention a detail in the `controller.py` file in the `vib2`
app: instead of sending `form.var.data` to the `compute` function we
may automatically generate a set of local variables such that the
application of data from the web page, here in the `compute` call, looks nicer:

@@@CODE ${app_path}/controller.py fromto: def index@
The idea is just to run `exec` on a declaration of a local variable
with name `field.name` for each field in the form. This trick is often
neat if web variables are buried in objects (`form.T.data`) and you want these
variables in your
code to look like they do in mathematical writing (`T` for $T$).

!split
===== Autogenerating the code =====
label{wf:vib3:flask:autogen}

## Define Mako variable for path to source code
<%
app_path = src_path + 'flask_apps/vib3'
%>

idx{`getattr`} idx{`setattr`} idx{`hasattr`}

We shall now present generic `model.py` and `controller.py`
files that work with *any* `compute` function (!). This example will
demonstrate some advanced, powerful features of Python. The source code
is found in the "`vib3`": "${github_path}/${app_path}"
directory.

__Inspecting function signatures.__
The basic idea is that the Python module `inspect` can be used to
retrieve the names of the arguments and the default values of
keyword arguments of *any* given `compute` function. Say we have some

!bc pycod
def mycompute(A, m=0, s=1, w=1, x_range=[-3,3]):
    ...
    return result
!ec
Running

!bc pycod
import inspect
arg_names = inspect.getargspec(mycompute).args
defaults  = inspect.getargspec(mycompute).defaults
!ec
leads to

!bc pycod
arg_names = ['A', 'm', 's', 'w', 'x_range']
defaults = (0, 1, 1, [-3, 3])
!ec
We have all the argument names in `arg_names` and
`defaults[i]` is the default value of keyword argument
`arg_names[j]`, where `j = len(arg_names) - len(defaults) + i`.

__Generating the model.__
Knowing the name `name` of some argument in the `compute`
function, we can make the corresponding class attribute
in the `InputForm` class by

!bc pycod
setattr(InputForm, name, FloatForm())
!ec
For name equal to `'A'` this is the same as hardcoding

!bc pycod
class InputForm:
    A = FloatForm()
!ec
Assuming that all arguments in `compute` are floats, we could
do

!bc pycod
class InputForm:
    pass  # Empty class

arg_names = inspect.getargspec(mycompute).args
for name in arg_names:
    setattr(InputForm, name, FloatForm())
!ec
However, we can do better than this: for
keyword arguments the type of the default value can be used to
select the appropriate form class. The complete `model.py` file
then goes as follows:

@@@CODE ${app_path}/model.py
(The `compute_gamma` function imported from `compute` is the
only application-specific statement in this code and will be explained later.)

__Generating the view.__
The call to `compute` in the `controller.py` file must also be expressed
in a general way such that the call handles any type and number of
parameters. This can be done in two ways, using either positional
or keyword arguments.

The technique with positional arguments
is explained first. It consists of collecting all parameters in
a list or tuple, called `args`, and then calling `compute(*args)`
(which is equivalent to `compute(args[0], args[1], ..., args[n])`
if `n` is `len(args)-1`). The elements of `args` are the values of the
form variables. We know the name of a form variable as a string
`name` (from `arg_names`), and if `form` is the form object,
the construction `getattr(form, name).data` extracts the value
that the user provided (`getattr(obj, attr)` gets the attribute, with name
available as a string in `attr`, in the object `obj`).
For exampe, if `name` is `'A'`, `getattr(form, name).data` is the same as
`form.A.data`.
Collecting all form variables, placing them in a list,
and calling `compute` are done with

!bc pycod
arg_names = inspect.getargspec(compute).args
args = [getattr(form, name).data for name in arg_names]
result = compute(*args)
!ec
Our `InputForm` class guarantees that all arguments in `compute`
are present in the form, but to be absolutely safe we can
test if `name` is present in the `form` object:

!bc pycod
args = [getattr(form, name).data for name in arg_names
        if hasattr(form, name)]
!ec

A potential problem with the `args` list is that the values might
be in wrong order. It appears, fortunately, that the order we
assign attributes to the form class is preserved when iterating over
the form. Nevertheless, using keyword arguments instead of positional
arguments provides a completely safe solution to calling `compute`
with the correct arguments. Keyword arguments are placed in a
dictionary `kwargs` and `compute` is called as `compute(**kwargs)`.
The generic solution is

!bc pycod
kwargs = {name: getattr(form, name).data for name in arg_names
          if hasattr(form, name)}
result = compute(**kwargs)
!ec
The `compute(**kwargs)` call is equivalent to `compute(A=1, b=3, w=0.5)`
in case `kwargs = {'w'=0.5, 'A':1, 'b':3}` (recall that the order of
the keys in a Python dictionary is undetermined).

__Generating the template.__
It remains to generate the right HTML template. The HTML code depends
on what the returned `result` object from `compute` contains. Only a
human who has the read `compute` code knows the details of the returned
result. Therefore, we leave it to a human to provide the part
of the HTML template that renders the result. The file `templates/view_results.html` contains this human-provided code, while `templates/view_forms.html`
is a completely generic template for the forms:

@@@CODE ${app_path}/templates/view_forms.html

A somewhat generic solution for rendering the results can be
provided by default. In the file `templates/view_results_default.html` we
offer a code that checks if `results` is a string ending in `'.png'`
or other typical file extensions for HTML images, and then writes out
the code for an image, and otherwise a string version of the `results`
object is dumped to the web page:

@@@CODE ${app_path}/templates/view_results_default.py
The `index` function must combine the two pieces of templates.
The complete, generic form of this function is then

@@@CODE ${app_path}/controller.py fromto: def index@

__Application.__
Let us apply the files above to plot the gamma probability density function

!bt
\[ g(x; a, h, A) = \frac{|h|}{\Gamma(a)A}\left(\frac{x}{A}\right)^{ah-1}
e^{-\left(\frac{x}{A}\right)^h},
\]
!et
and its cumulative density

!bt
\[ G(x; a, h, A) = \int_0^x g(\tau; a, h, A)d\tau,\]
!et
computed by numerically the Trapezoidal rule, for instance.
We also want to compute and display
the mean value $A\Gamma(a + 1/h)/\Gamma(a)$ and
standard deviation

!bt
\[ \sigma = \frac{A}{\Gamma(a)}\sqrt{\Gamma(a + 2/h)\Gamma(a) - \Gamma(a+1/h)^2}.\]
!et
Here, $\Gamma(a)$ is the gamma function, which can be computed
by `math.gamma(a)` in Python.
Below is a `compute.py` file with the
relevant implementations of $g(x;a,h,A)$ (`gamma_density`),
$G(x; a, h, A)$ (`gamma_cumulative`), and a function `compute_gamma` for
making a plot of $g$ og $G$ for $x\in [0,7\sigma]$.

@@@CODE ${app_path}/compute.py fromto: def gamma_density@if __name
The `compute_gamma` function returns a tuple of four values.
We want output as displayed in Figure ref{wf:vib3:flask:fig:gamma}.

FIGURE: [fig-web4sa/vib3_flask_gamma, width=700] Design of a web page illustrating the gamma probability functions. label{wf:vib3:flask:fig:gamma}

The design is realized in the file `view_results.html` shown below.

@@@CODE ${app_path}/templates/view_results.html

To create the web application, we just copy the generic `controller.py`,
`model.py`,
and `templates/view_forms.html` files, add the
application-specific
`compute.py` and `templates/view_results.html` files given above,
and *write one line* in
`model.py`:

!bc pycod
from compute import compute_gamma as compute
!ec
That's it! Running `controller.py` file starts the app.

!split
===== Avoiding plot files =====
label{wf:vib3:flask:nofiles}

## Define Mako variable for path to source code
<%
app_path = src_path + 'flask_apps/vib4'
%>

Files with plots are easy to deal with as long as they are in the
`static` subdirectory of the Flask application directory. However,
the less files a web app makes use of, the better. Also, the problem
with ensuring that new plots are really loaded into the browser
required us to generate unique filenames. Therefore, it would be
convenient to get the plot as a string and embed the string data
directly into the HTML code. This is relatively easy with Matplotlib
and Python. The relevant code constitutes the
"`vib4`": "${github_path}/${app_path}" app in the
directory of the same name.

idx{inline PNG image in HTML}
idx{`StringIO` objects}
idx{file-like string objects (`StringIO`)}
idx{strings as files (`StringIO`)}
idx{base64 encoding of PNG images}

=== PNG plots ===

Python has the `StringIO` object that is a string buffer with the
look and behavior of a file. The idea is to let Matplotlib write to
a `StringIO` object and afterwards extract the string from this object:

!bc pycod
import matplotlib.pyplot as plot
from StringIO import StringIO
# run plt.plot, plt.title, etc.
figfile = StringIO()
plt.savefig(figfile, format='png')
figfile.seek(0)  # rewind to beginning of file
figdata_png = figfile.buf  # extract string
!ec
Before the PNG data can be embedded in HTML we need to convert the
data to base64 format:

!bc pycod
import base64
figdata_png = base64.b64encode(figdata_png)
!ec
Now we can embed the PNG data in HTML by

!bc pycod
# html is some file object for the HTML file
html.write("""
<img src="data:image/png;base64,%(figdata_png)s" width=500>
""" % vars())
!ec
The corresponding syntax in an HTML template is

!bc htmlcod
<img src="data:image/png;base64,{{ figdata_png }}" width=500>
!ec

idx{inline SVG figure in HTML}

=== SVG plots ===

Inline figures in HTML, instead of using files, are most often realized
by XML code with the figure data in SVG format.
Plot strings in the SVG format are created very similarly to the PNG
example:

!bc pycod
figfile = StringIO()
plt.savefig(figfile, format='svg')
figdata_svg = figfile.buf
!ec
The `figdata_svg` string contains XML code text can almost
be directly embedded in
HTML5. However, the beginning of the text contains information before
the `svg` tag that we want to remove:

!bc dat
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Created with matplotlib (http://matplotlib.sourceforge.net/) -->
<svg height="441pt" version="1.1" viewBox="0 0 585 441" ...
!ec
The removal is done with a little string manipulation:

!bc pycod
figdata_svg = '<svg' + figfile.buf.split('<svg')[1]
!ec
Now, `figdata_svg` can be directly inserted in HTML code without
any surrounding tags.
The file "`compute.py`": "${github_path}/${app_path}/compute.py"
in the `vib4_flask` application directory contains all the details.

The `compute_gamma` function returns six values:
the PNG data for the $g$ plot, the PNG data for the $G$ plot,
the SVG XML code for the $g$ plot, the SVG XML code for the $G$ plot,
the mean value, and the value of the standard deviation. We can
keep the `controller.py` unchanged (except for the URL, which is now `vib4`)
and adjust the `view_results.html`
template only. The `result` object is now a tuple with 6 elements.
For illustration purposes we make two rows with plots, one with
PNG data and one with SVG data. The template becomes

@@@CODE ${app_path}/templates/view_results.html
Special HTML characters like `<`, `>`,
`&`, `"`, and `'` are escaped in a template string like `{{ str }}`
(i.e., `&` is replaced by `&amp;` `<` is replaced by `&lt;`, etc.).
We need to avoid this manipulation of the string content
because `result[2]` and `result[3]` contain
XML code where the mentioned characters are essential part of the syntax.
Writing `{{str|safe}}` ensures that the contents of the string `str`
are not altered before being embedded in the HTML text.

Trying out the `vib4_flask` application we see that the SVG plots are
much bigger than the width-controlled PNG plots.
The width and height of SVG plots are specified in the XML code and can
of course be changed by proper string replacements for the
`width`, `height`, and `viewBox` specifications. It is far easier to
just write the `width` specification in the image tag for the PNG plot.






