!split
======= Handling multiple input variables in Django =======
label{wf:vib:django}

We shall briefly how to work with multi-variable input in Django.
# #if TOPIC == 'Flask+Django'
The text is the Django counterpart to Section ref{wf:vib:flask}.
# #endif
There are four float input variables: $A$, $b$, $w$, and $T$.
A function `compute` in the file `compute.py` makes
a plot of the function $u(t)=Ae^{-bt}\sin (wt)$
depending on these four parameters and returns
the name of the plot file. Our task is to define four input fields,
execute the `compute` function and show the input fields together with
the resulting plot,
cf. Figures ref{wf:vib1:flask:fig:input}
and ref{wf:vib1:flask:fig:result}.
# #if TOPIC == 'Django'
FIGURE: [fig-web4sa/vib1_flask_input, width=500] The input page. label{wf:vib1:flask:fig:input}

FIGURE: [fig-web4sa/vib1_flask_output, width=700] The result page. label{wf:vib1:flask:fig:result}
# #endif

===== Programming the Django application =====

## Define Mako variable for path to source code
<%
app_path = src_path + 'vib/vib1_django'
%>


Any Django app needs a project, but here we reuse the project
we set up for the scientific hello world examples. We go to
the directory `apps/vib` and create the Django app `vib1_django`:

!bc sys
Terminal> python ../../django_project/manage.py startapp vib1_django
!ec
Then we

 o add `sys.path.insert(0, relative2absolute_path('../../apps/vib'))`
   in `settings.py`,
 o add `relative2absolute_path('../../apps/vib/vib1_django/templates'),`
   to the `TEMPLATE_DIRS` tuple in `settings.py`, and
 o add `url(r'^vib1/', 'vib1_django.views.index')` to the `patterns`
   call in `urls.py`.

These steps ensure that Django can find our application as a module/package,
that Django can find our templates associated with this application,
and that the URL address applies the name `vib1` to reach the application.

The computations in our application are put in a file `compute.py`
# #if TOPIC == 'Django'

@@@CODE ${app_path}/compute.py
# #else
and explained in detail in Section ref{wf:vib1:flask:app}.
# #endif

idx{Django!input forms}

We can now write `models.py` and the `Input` class that defines
the form fields for the four input variables:

@@@CODE ${app_path}/models.py
Note here that we can provide a more explanatory name than just
the variable name, e.g., `' amplitude (m)'` for `A`. However,
Django will always capitalize these descriptions, so if one really
needs lower case names (e.g., to be compatible with a mathematical notation
or when just listing the unit),
one must start the text with a space, as we have demonstrated above.
We also provide a default
value such that all fields have a value when the user sees
the page.

idx{Django!`index` function}

The `views.py` file looks as follows:

@@@CODE ${app_path}/views.py
Some remarks are necessary:

 o Doing an `os.chdir` to the current working directory is necessary
   as Django may be left back in another working directory if you have
   tested other apps.
 o The `form2` object from `form.save` is the object we extract
   data from and send to `compute`, but the original `form`
   object is needed when making the HTML page through the template.
 o Images, media files, style sheets, javascript files, etc. must
   reside in a subdirectory `static`. The specifications of the
   URL applies tools to find this `static` directory and then
   the `static` prefix in the `result` filename must be removed.

The template for rendering the page is listed next.

@@@CODE ${app_path}/templates/vib1.html
The tricky part is the syntax for displaying *static content*, such as
the plot file made in the `compute` function.

===== User-provided validation =====

## Define Mako variable for path to source code
<%
app_path = src_path + 'vib/vib2_django'
%>

Django has a series of methods available for user-provided validation
of form data. These are exemplified in the app `vib2_django`, which
is an extension of the `vib1_django` app with additional code. (This other
app needs of course registrations in `settings.py` and `urls.py`, similar
to what we did for the `vib1_django` app.)

idx{Django!input validation}

Making sure that $A>0$ is easiest done with a built-in Django
validator for minimum value checking:

!bc pycod
class Input(models.Model):
    A = models.FloatField(
        verbose_name=' amplitude (m)', default=1.0,
        validators=[MinValueValidator(0)])
!ec

We can write our own validators, which are functions taking the value
is the only argument and raising a `ValidationError` exception if the
value is wrong. Checking that a value is inside an interval can first
be implemented by

@@@CODE ${app_path}/models.py fromto: def check_interval@def interval
However, this function takes more than the value as argument. We therefore
need to wrap it by a function with `value` as the only argument. The following
utility returns such a
# #if TOPIC == 'Flask+Django'
function (see Section ref{wf:vib1:flask:validation} for more
explanation):
# #else
function:
# #endif

!bc pycod
import functools

def interval(min_value=None, max_value=None):
    """Django-compatible interface to check_interval."""
    return functools.partial(
        check_interval, min_value=min_value, max_value=max_value)
!ec
Now, `interval(0, 1)` returns a function that takes `value` as its
only argument and checks if it is inside $[0,1]$.
Such a function can be inserted in the `validators` list in
the field constructor, here to tell that $b$ must be in $[0,\infty)$:

!bc pycod
class Input(models.Model):
    ...
    b = models.FloatField(
        verbose_name=' damping coefficient (kg/s)', default=0.0,
        validators=[interval(0,None)])
!ec

A final example on custom validation is to avoid plotting more
than 30 periods of the oscillating function $u$. This translates
to checking that $T$ is geater
than 30 periods, i.e., $T>30\cdot 2\pi/w$. The task is done in
the `InputForm` class, where any method `clean_name` can do
validation and adjustment of the field name `name`. The code for
a `clean_T` method goes as follows:

!bc pycod
class InputForm(ModelForm):
    class Meta:
        model = Input

    def clean_T(self):
        T = self.cleaned_data['T']
        w = self.cleaned_data['w']
        period = 2*pi/w
        if T > 30*period:
            num_periods = int(round(T/period))
            raise ValidationError(
                'Cannot plot as much as %d periods! T < %.2f' %
                (num_periods, 30*period))
        return T
!ec
We refer to the vast Django documentation for many other ways of
validating forms. The reader is encouraged to run the `vib2_django`
application and test out the validations we have implemented.


