.. !split

.. _wf:vib3:flask:autogen:

Autogenerating the code
-----------------------




.. index:: getattr

.. index:: setattr

.. index:: hasattr


We shall now present generic ``model.py``, ``view.py``, and ``controller.py``
files that work with *any* ``compute`` function (!). This example will
demonstrate some advanced, powerful features of Python.

The basic idea is that the Python module ``inspect`` can be used to
retrieve the names of the arguments, and the default values of
keyword arguments of any given ``compute`` function. Say we have some


.. code-block:: python

        def mycompute(A, m=0, s=1, w=1, x_range=[-3,3]):
            ...
            return result

Running


.. code-block:: python

        import inspect
        arg_names = inspect.getargspec(mycompute).args
        defaults  = inspect.getargspec(mycompute).defaults

leads to


.. code-block:: python

        arg_names = ['A', 'm', 's', 'w', 'x_range']
        defaults = (0, 1, 1, [-3, 3])


Knowing the names ``name`` of some argument in the ``compute``
function, we can make the corresponding class attribute
in the ``InputForm`` class by


.. code-block:: python

        setattr(InputForm, name, FloatForm())

For name equal to ``'A'`` this is the same as hardcoding


.. code-block:: python

        class InputForm:
            A = FloatForm()

Assuming that all arguments in ``compute`` are floats, we could
do


.. code-block:: python

        class InputForm:
            pass  # Empty class
        
        arg_names = inspect.getargspec(mycompute).args
        for name in arg_names:
            setattr(InputForm, name, FloatForm())

However, we can do better than this: default values can be set for
keyword arguments, and the type of default value can be used to
select the appropriate form class. The complete ``model.py`` file
then goes as follows:


.. code-block:: python

        """
        Example on generic model.py file which inspects the arguments
        of the compute function and automatically generates a relevant
        InputForm class.
        """
        
        import wtforms
        from math import pi
        
        from compute import compute_gamma as compute
        import inspect
        arg_names = inspect.getargspec(compute).args
        defaults  = inspect.getargspec(compute).defaults
        
        class InputForm(wtforms.Form):
            pass
        
        # Augment defaults with None elements for the positional
        # arguments
        defaults = [None]*(len(arg_names)-len(defaults)) + list(defaults)
        # Map type of default to right form field
        type2form = {type(1.0): wtforms.FloatField,
                     type(1):   wtforms.IntegerField,
                     type(''):  wtforms.TextField,
                     }
        
        for name, value in zip(arg_names, defaults):
            if value is None:
                setattr(InputForm, name, wtforms.FloatField(
                    validators=[wtforms.validators.InputRequired()]))
            else:
                if type(value) in type2form:
                    setattr(InputForm, name, type2form[type(value)](
                        default=value,
                        validators=[wtforms.validators.InputRequired()]))
                else:
                    raise TypeError('argument %s %s not supported' %
                                    name, type(value))
        
        if __name__ == '__main__':
            for item in dir(InputForm):
                if item in arg_names:
                    print item, getattr(InputForm, item)

(The ``compute_gamma`` function imported from ``compute`` will be treated later.)

The call to ``compute`` in the ``view.py`` file must also be expressed
in a general way such that it handle any type and number of
parameters. This is achieved by collecting all parameters in
a list or tuple, called ``args``, and then calling ``compute(*args)``
(which is equivalent to ``compute(args[0], args[1], ..., args[l])``
if ``l`` is ``len(args)-1``). The value of the form variable with
name ``name`` (string) is extracted by ``getattr(form, name).data``,
which is the same as ``form.A.data`` if ``name`` equals ``'A'``.
Collecting all arguments and calling ``compute`` are done with


.. code-block:: python

        arg_names = inspect.getargspec(compute).args
        args = [getattr(form, name).data for name in arg_names]
        result = compute(*args)

Our ``InputForm`` class guarantees that all arguments in ``compute``
are present in the form, but to be absolutely safe we can
test if ``name`` is present in the ``form`` object:


.. code-block:: python

        args = [getattr(form, name).data for name in arg_names
                if hasattr(form, name)]

We could also use keyword arguments in the call in case
the ``args`` list should have the parameters in the wrong order:


.. code-block:: python

        kwargs = {name: getattr(form, name).data for name in arg_names
                  if hasattr(form, name)}
        result = compute(**kwargs)

The ``compute(**kwargs)`` becomes ``compute(A=1, b=3, w=0.5)``
in case ``kwargs = {'w'=0.5, 'A':1, 'b':3}`` (recall that the order of
the keys in a Python dictionary is undetermined).

It remains to generate the right HTML template. The HTML code depends
what the returned ``result`` object from ``compute`` contains. Only the
writer of the ``compute`` function knows the details of the returned
result. Therefore, we leave it to this writer to provide the part
of the HTML template that renders the result. The file ``templates/view_results.html`` contains this user-provided code, while ``templates/view_forms.html``
is the generic template for the forms:


.. code-block:: html

        <form method=post action="">
        <table>
          {% for field in form %}
            <tr><td>{{ field.name }}</td> <td>{{ field }}</td>
            <td>{% if field.errors %}
              <ul class=errors>
              {% for error in field.errors %}
                <li>{{ error }}</li>
              {% endfor %}</ul>
            {% endif %}</td></tr>
          {% endfor %}
        </table>
        <p><input type=submit value=Compute></form></p>


By default, in ``templates/view_results_default.html``, we can
create a code that checks if ``results`` is a string ending in ``'.png'``
or other typical file extensions for HTML images, and then write out
the code for an image, and otherwise a string version of the ``results``
object is dumped to the web page:


.. code-block:: python

        <p>
        {% if result != None %}
          {% if type(result) == type("") and
                result[:-4] == '.png' or  result[:-4] == '.gif' or
                result[:-4] == '.jpg' %}
        <img src="{{ result }}">
          {% else %}
        {{ str(result) }}
          {% endif %}
        {% endif %}
        </p>

The complete, generic ``index`` function now becomes


.. code-block:: python

        def index():
            form = InputForm(request.form)
            if request.method == 'POST' and form.validate():
                arg_names = inspect.getargspec(compute).args
                kwargs = {name: getattr(form, name).data
                          for name in arg_names if hasattr(form, name)}
                result = compute(**kwargs)
            else:
                result = None
            # Concatenate view_forms.html and view_results.html
            forms_html   = os.path.join('templates', 'view_forms.html')
            results_html = os.path.join('templates', 'view_results.html')
            view_html    = os.path.join('templates', 'view.html')
            f_forms = open(forms_html, 'r')
            f_res   = open(results_html, 'r')
            f_view  = open(view_html, 'w')
            f_view.write(f_forms.read() + f_res.read())
            f_forms.close();  f_res.close();  f_view.close()
            return render_template(os.path.basename(view_html),
                                   form=form, result=result)


*Application.* Let us apply the files above to plot the *gamma probability density*


.. math::
         g(x; a, h, A) = \frac{|h|}{\Gamma(a)A}\left(\frac{x}{A}\right)^{ah-1}
        e^{-\left(\frac{x}{A}\right)^h},
        

and its cumulative density


.. math::
         G(x; a, h, A) = \int_0^x g(\tau; a, h, A)d\tau,

computed by numerically the Trapezoidal rule, for instance.
We also want to compute and display
the mean value :math:`A\Gamma(a + 1/h)/\Gamma(a)` and
standard deviation


.. math::
         \sigma = \frac{A}{\Gamma(a)}\sqrt{\Gamma(a + 2/h)\Gamma(a) - Gamma(a+1/h)^2}.

Here, :math:`\Gamma(a)` is the gamma function, which can be computed
by ``math.gamma(a)`` using Python's ``math`` module.
Below are relevant implementations of :math:`g(x;a,h,A)` (``gamma_density``),
:math:`G(x; a, h, A)` (``gamma_cumulative``), and a function for
making a plot of :math:`g` og :math:`G` for :math:`x\in [0,7\sigma]`.


.. code-block:: python

        def gamma_density(x, a, h, A):
            # http://en.wikipedia.org/wiki/Gamma_distribution
            xA = x/float(A)
            return abs(h)/(math.gamma(a)*A)*(xA)**(a*h-1)*exp(-xA**h)
        
        def gamma_cumulative(x, a, h, A):
            # Integrate gamma_density using the Trapezoidal rule.
            # Assume x is array.
            g = gamma_density(x, a, h, A)
            r = zeros_like(x)
            for i in range(len(r)-1):
                r[i+1] = r[i] + 0.5*(g[i] + g[i+1])*(x[i+1] - x[i])
            return r
        
        def compute_gamma(a=0.5, h=2, A=math.sqrt(2), resolution=500):
            """Return plot and mean/st.dev. value of the gamma density."""
            gah = math.gamma(a + 1./h)
            mean = A*gah/math.gamma(a)
            stdev = A/math.gamma(a)*math.sqrt(
                math.gamma(a + 2./h)*math.gamma(a) - gah**2)
            x = linspace(0, 7*stdev, resolution+1)
            y = gamma_density(x, a, h, A)
            plt.figure()  # needed to avoid adding curves in plot
            plt.plot(x, y)
            plt.title('a=%g, h=%g, A=%g' % (a, h, A))
            if not os.path.isdir('static'):
                os.mkdir('static')
            else:
                # Remove old plot files
                for filename in glob.glob(os.path.join('static', '*.png')):
                    os.remove(filename)
            # Use time since Jan 1, 1970 in filename in order make
            # a unique filename that the browser has not chached
            t = str(time.time())
            plotfile1 = os.path.join('static', 'density_%s.png' % t)
            plotfile2 = os.path.join('static', 'cumulative_%s.png' % t)
            plt.savefig(plotfile1)
            y = gamma_cumulative(x, a, h, A)
            plt.figure()
            plt.plot(x, y)
            plt.grid(True)
            plt.savefig(plotfile2)
            return plotfile1, plotfile2, mean, stdev

The ``compute_gamma`` function returns a tuple of four values.
We want output as displayed in Figure :ref:`wf:vib3:flask:fig:gamma`.


.. _wf:vib3:flask:fig:gamma:

.. figure:: fig-web4sa/vib3_flask_gamma.png
   :width: 700

   *Design of a web page illustrating the gamma probability functions*


The design is realized in the file ``view_results.html`` shown below.


.. code-block:: html

        {% if result != None %}
        <p>
        <table>
        <tr>
        <td><img src="{{ result[0] }}" width="400"></td>
        <td><img src="{{ result[1] }}" width="400"></td>
        </tr>
        <tr><td>
        Mean value: {{ result[2] }} <br>
        Standard deviation value: {{ result[3] }}
        </td></tr>
        </table>
        </p>
        {% endif %}




