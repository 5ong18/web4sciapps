.. !split

Making a Django application
===========================

Django applies two concepts, *project* and *application*. The application,
or app for short,
is the program we want to run through a web interface. The project is
a Python package containing common settings and configurations for
a collection of apps. This means that before we can make a Django app,
we must to establish a Django project.

Installing Django
-----------------


.. index::
   single: Django; installation


We recommend to
download and istall the latest official version from
`<http://www.djangoproject.com/download/>`_. Pack out the tarfile, go
to the directory, and run ``setup.py``:


.. code-block:: console

        Terminal> tar xvzf Django-1.5-tar.gz
        Terminal> cd Django-1.5
        Terminal> sudo python setup.py install

The version in this example, 1.5, may be different at the time you
follow these instructions.


Setting up a Django project
---------------------------


.. index::
   single: Django; making a project


A Django project for managing a set of Django apps is
created by the command


.. code-block:: console

        Terminal> django-admin.py startproject django_project

The result is a directory ``django_project`` whose content can be explored
by some ``ls`` and ``cd`` commands:


.. code-block:: console

        Terminal> ls django_project
        manage.py django_project
        Terminal> cd django_project/django_project
        Terminal> ls
        __init__.py settings.py urls.py wsgi.py

The meaning of the generated files are briefly listed below.

  1. The outer ``django_project/`` directory is just a container for your project. Its name does not matter to Django.

  2. ``manage.py`` is a command-line utility that lets you interact with this Django project in various ways. You will typically run ``manage.py`` to launch a Django application.

  3. The inner ``django_project/`` directory is a Python package for the Django project. Its name is used in import statements in Python code (e.g., ``import django_project.settings``).

  4. ``django_project/__init__.py`` is an empty file that just tells Python that this directory should be considered a Python package.

  5. ``django_project/settings.py`` contains the settings and configurations for this Django project.

  6. ``django_project/urls.py`` maps URLs to specific functions and thereby defines that actions that various URLs imply.

  7. ``django_project/wsgi.py`` is not needed in our examples.

Django comes with a web server for developing and debugging applications.
The server is started by running


.. code-block:: console

        Terminal> python manage.py runserver

You will see that the server runs on the URL "http://127.0.0.1:8000/".
Load this URL into your browser to see a welcome message from Django,
meaning that the server is working.

Despite the fact that our web applications do not need a database, you
have to register a database with a Django project. To this end,
open the ``django_project/settings.py`` file in a text editor,
locate the ``DATABASES`` dictionary and make sure the following
code is there:


.. code-block:: python

        import os
        
        def relative2absolute_path(relative_path):
            """Return the absolute path correspodning to relative_path."""
            dir_of_this_file = os.path.dirname(os.path.abspath(__file__))
            return os.path.join(dir_of_this_file, relative_path)
        
        DATABASES = {
           'default' : {
              'ENGINE': 'django.db.backends.sqlite3',
              'NAME': relative2absolute_path('../database.db')
           }
        }

The ``settings.py`` file needs absolute paths to files, while it is
more convenient for us to specify relative paths. Therefore,
we made a function that figures out the absolute path to the ``settings.py``
file and then combines this absolute path with the relative path.
The location and name of the database file can be chosen as desired.
Note that one should not use ``os.path.join`` to create paths as Django
applies the forward slash between directories also on Windows.


Setting up a Django application
-------------------------------


.. index::
   single: Django; making an application


The next step is to create a Django app for our scientific hello
world program. We can place the app in any directory, but here we
utilize the following organization.
As neighbor to ``django_project`` we have
a directory ``apps`` containing our various scientific applications.
Under ``apps`` we create a directory ``hw``
for the various versions of the scientific hello world applications:
``orig`` for the original ``hw.py`` program, ``mvc`` for a split of this
program according to the original MVC pattern, ``mvc_django`` for
the MVC split according to the way Django requires,
and ``hw1_django`` for a first version of
the program with a Django-based web interface.


.. code-block:: console

        Terminal> cd ..
        Terminal> mkdir apps
        Terminal> cd apps
        Terminal> mkdir hw
        Terminal> cd hw
        Terminal> mkdir orig mvc

The file ``hw.py`` is moved to ``orig`` while ``mvc`` contains
the MVC refactored version with the files ``model.py``, ``view.py``, ``compute.py``,
and ``controller.py``.

The ``hw1_django`` directory, containing the Django application, must be
made with

.. code-block:: console

        Terminal> python ../../django_project/manage.py startapp hw1_django

The command creates a directory ``hw1_django`` with the content


.. code-block:: console

        Terminal> cd hw1_django
        Terminal> ls
        __init__.py models.py tests.py views.py

The ``__init__.py`` file is empty and needed to ensure that the
Django application is a Python package. The other files are also
empty, but ``models.py`` and ``views.py`` will soon be filled with content.

At this point,
we need to register some information about our application in the
``django_project/settings.py`` and ``django_project/urls.py`` files.

*Step 1: Add the app.* Locate the ``INSTALLED_APPS``
tuple in ``settings.py`` and add your Django application as a Python package:
directory ``django``:


.. code-block:: python

        INSTALLED_APPS = (
            'django.contrib.auth',
            'django.contrib.contenttypes',
            ...
            'hw1_django',
        )

However, Django will not be able to find the package ``hw1_django``
unless we register the parent directory in ``sys.path``:


.. code-block:: python

        import sys
        sys.path.insert(0, relative2absolute_path('../../apps/hw'))

Note here that the relative path is given with respect to the
location of the ``settings.py`` script.

*Step 2: Adding a template directory.* Make a subdirectory ``templates`` under ``hw1_django``,


.. code-block:: console

        mkdir templates

and add the absolute path of this directory to the ``TEMPLATE_DIRS`` tuple:


.. code-block:: python

        TEMPLATE_DIRS = (
            relative2absolute_path('../../apps/hw/hw1_django/templates'),
        )

The ``templates`` directory will hold templates for the HTML code applied
in the web interfaces. The trailing comma is important (as this is
a tuple with only one element).

*Step 3: Defining the URL.* We need to connect the Django app with
an URL, i.e., the address we write into the web browser to launch the
app. Our app will be associated with a Python function ``index``
in the ``views`` module within the ``hw1_django`` package.
Say we want the corresponding URL to
be named ``hw``. This is registered in the ``django_project/urls.py`` file
by


.. code-block:: python

        urlpatterns = patterns('',
            url(r'^hw1/', 'hw1_django.views.index'),

The first argument to the ``url`` function is a regular expression for
the URL and the second argument is the name of the function to call.
The name ``index`` resembles the ``index.html`` main page associated
with an URL, but any other name than ``index`` can be used.

